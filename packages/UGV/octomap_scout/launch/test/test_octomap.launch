<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!--/laser_cloud_surround for lego ** /laser_cloud_map for aloam ** /velodyne_cloud_registered  for loam -->
  <arg name="pointcloudTopic" default="/registered_cloud"/>  
  <arg name="mapFrame" default="map"/> 
  <arg name="pointcloudFrame" default="base_link"/> 

  <!-- <node pkg="test_octomap" type="tf_camera_to_map" name="tf_camera2map"/> -->

  <!-- <node pkg="test_octomap" type="pointcloud2map" name="pointcloud2map" output="screen">
    <param name="pointcloud_trans_topic" value="$(arg pointcloudTopic)" />
    <param name="pointcloud_in_topic" value="/camera/depth/points" />
  </node> -->

  <!-- <node pkg="octomap_scout" type="octomap_server_multilayer" name="octomap_server" output="screen"> -->
  <node pkg="octomap_scout" type="octomap_server_node" name="octomap_server" output="screen">
    <!-- resolution in meters per pixel -->
    <param name="resolution" value="0.15" />

    <!-- name of the fixed frame, needs to be "/map" for SLAM -->
    <param name="frame_id" type="string" value="$(arg mapFrame)" />
    <param name="base_frame_id" type="string" value="$(arg pointcloudFrame)" />

    <!-- max range / depth resolution of the kinect in meter -->
    <!-- <param name="sensor_model/max_range" value="10.0" /> -->
    
    <param name="latch" value="false" />

    <!-- max/min height for occupancy map, should be in meters -->
    <param name="pointcloud_max_z" value="1000" />
    <param name="pointcloud_min_z" value="-1000" />

    <!-- max/min height for occupancy map, should be in meters -->
    <param name="occupancy_min_z" value="-1000"/>
    <param name="occupancy_max_z" value="1000"/>

     <!-- Ignore speckles in the map -->
    <param name="filter_speckles" value="true" />

    <!-- filter_ground -->
    <!-- <param name="filter_ground" value="true"/>
    <param name="ground_filter/distance" value="-0.7"/>
    <param name="ground_filter/angle" value="0.0"/>
    <param name="ground_filter/plane_distance" value="0.1" /> -->

    <!-- topic from where pointcloud2 messages are subscribed -->
    <remap from="/cloud_in" to="$(arg pointcloudTopic)" />
  </node>

  <!-- **process 2d map form octomap and output a "/map" topic occupied map**-->
  <node pkg="octomap_scout" type="process_2d_map" name="process_2d_map"  output="screen">
    <!-- step for search the elevation map in angle_method \ stdev_method  methods-->
    <param name="step" value="5" />
    <!-- the num of cells threshold in search eara, greater than this threshold will be set free cells -->
    <param name="th_free_num" value="3" />
    <!--  method to calculate the occupied probability for 2d map >>> -->
    <!-- now support two ways: angle_method \ stdev_method \ stdev_method_sparse-->
    <param name="method" value="stdev_method_sparse" />
    <!-- if choose angle_method, the angle threshold, cells greater than this threshold will be set occupied -->
    <param name="th_angle" value="30.0" />
    <!-- if choose stdev_method, the stdev threshold, cells greater than this threshold will be set occupied -->
    <param name="th_stdev" value="2.0" />
  </node>

  <!-- RViz -->
  <node pkg="rviz" type="rviz" name="$(anon rviz)" respawn="false" output="screen" args="-d $(find octomap_scout)/rviz/aloam_octomap.rviz"/>

</launch>

